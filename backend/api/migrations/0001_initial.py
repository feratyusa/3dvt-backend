# Generated by Django 4.1.2 on 2022-10-26 02:25

import api.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Users",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "full_name",
                    models.CharField(
                        blank=True,
                        help_text="Full Name of the User",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        help_text="Avatar of this user",
                        null=True,
                        upload_to=api.models.upload_to,
                    ),
                ),
                (
                    "institution",
                    models.CharField(
                        blank=True,
                        help_text="Institution of this user",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "apikey",
                    models.CharField(
                        help_text="User API Key (Token), generated by django AuthToken",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="FileData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "groupname",
                    models.CharField(
                        help_text="User Group Name for this current Task",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "files",
                    models.FileField(
                        help_text="File to be Processed",
                        null=True,
                        upload_to=api.models.FileDataset,
                        verbose_name="files",
                    ),
                ),
                (
                    "uploaded",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="File Upload Timeframe",
                        null=True,
                        verbose_name="Uploaded",
                    ),
                ),
            ],
            options={
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="ImageData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "groupname",
                    models.CharField(
                        help_text="User Group Name for this current Task",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "images",
                    models.ImageField(
                        help_text="Image File to be Processed",
                        null=True,
                        upload_to=api.models.ImageDataset,
                        verbose_name="images",
                    ),
                ),
                (
                    "result",
                    models.ImageField(
                        help_text="Image Result",
                        null=True,
                        upload_to=api.models.ResultDataset,
                        verbose_name="result",
                    ),
                ),
                (
                    "uploaded",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Image Upload Timeframe",
                        null=True,
                        verbose_name="Uploaded",
                    ),
                ),
            ],
            options={
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="LandingPage",
            fields=[
                (
                    "section",
                    models.CharField(
                        help_text="Corresponding Landing Page's Section",
                        max_length=50,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Section",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        default=str,
                        help_text="Landing Page's Section Title",
                        max_length=50,
                        verbose_name="title",
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        help_text="Content of Landing Page's Section",
                        null=True,
                        verbose_name="Content",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        help_text="Optional Image for Landing Page's Section",
                        null=True,
                        upload_to="",
                    ),
                ),
                (
                    "kwargs",
                    models.JSONField(
                        default=dict,
                        help_text="Optional kwargs for Landing Page's Section",
                        null=True,
                    ),
                ),
            ],
            options={
                "ordering": ["section"],
            },
        ),
        migrations.CreateModel(
            name="Publication",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        default=str,
                        help_text="Publication Name / Synopsis",
                        max_length=50,
                        verbose_name="Name",
                    ),
                ),
                (
                    "link",
                    models.URLField(
                        help_text="Publication Link", null=True, verbose_name="link"
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Publication Details",
                        null=True,
                        verbose_name="Description",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Researcher",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Researcher's Name",
                        max_length=50,
                        null=True,
                        verbose_name="Name",
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(
                        help_text="Researcher's Avatar",
                        null=True,
                        upload_to="",
                        verbose_name="Avatar",
                    ),
                ),
                (
                    "link",
                    models.URLField(
                        help_text="Researcher's Profile Link on ITS Webiste",
                        null=True,
                        verbose_name="link",
                    ),
                ),
                (
                    "kwargs",
                    models.JSONField(
                        default=dict,
                        help_text="Optional kwargs for Researcher Section",
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Segmentation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "groupname",
                    models.CharField(
                        help_text="User Group Name for this current Task",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        help_text="Task Status, ex: 'STARTED', 'FINISHED",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "model",
                    models.CharField(
                        blank=True,
                        help_text="Selected Model for the Task",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "createdate",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Task Creation Date"
                    ),
                ),
                (
                    "images",
                    models.ManyToManyField(
                        related_name="image_set", to="api.imagedata"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="Corresponding user ID",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="Reconstruction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "groupname",
                    models.CharField(
                        help_text="User Group Name for this current Task",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        help_text="Task Status, ex: 'STARTED', 'FINISHED",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "model",
                    models.CharField(
                        blank=True,
                        help_text="Selected Model for the Task",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "createdate",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Task Creation Date"
                    ),
                ),
                (
                    "files",
                    models.ManyToManyField(related_name="file_set", to="api.filedata"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="Corresponding user ID",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-id"],
            },
        ),
        migrations.AddField(
            model_name="imagedata",
            name="task",
            field=models.ForeignKey(
                help_text="Corresponding Task",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="api.segmentation",
            ),
        ),
        migrations.AddField(
            model_name="imagedata",
            name="user",
            field=models.ForeignKey(
                help_text="Corresponding user ID",
                on_delete=django.db.models.deletion.CASCADE,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="filedata",
            name="task",
            field=models.ForeignKey(
                help_text="Corresponding Task",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="api.reconstruction",
            ),
        ),
        migrations.AddField(
            model_name="filedata",
            name="user",
            field=models.ForeignKey(
                help_text="Corresponding user ID",
                on_delete=django.db.models.deletion.CASCADE,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
    ]
